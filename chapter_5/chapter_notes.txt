//Section 5.1 Notes
"A pointer is a variable that contains the address of a variable"

"Pointers are much used in C, partly because they are sometimes the only way to express a computation and partly because they usually lead to more compact and efficient code
than can be obtained in other ways."

"Memory is organized, in a simplified fashion, as an array of consecutively numbered or addressed memory cells that may be
manipulated individually or in contiguous groups."

Data of various types costs bytes, memory is made up of bytes a pointer therefore is a group of cells (>2B) and can hold an address"

"Hold an address"

Pointer P and Char C -> 
    p = &c 
This assigns the address of c to the variable p and p is said to point to c.
The & operator only applies to objects in memory: variables and array elements.
The unary operator * is the indirection or dereferencing operator; when applied to a pointer it accesses the object the pointer points to.

If x and y are integers and ip is a pointer to int then:

int x = 1, y = 2, z[10];
int *ip;    /* ip is a pointer to int */ -> The expression *ip is an int

ip = &x;    /* ip now points to x */    
y = *ip;    /* y is now 1 */
*ip = 0;    /* x is now 0 */
ip = &z[0]; /* ip now points to z[0] */


double *dp, atof(char *);
AN expression *dp and atof(s) have values of type double and that the arg of atof is a pointer to char

There is an exception of the pointer to void is used to hold any type of pointer but cannot be dereferenced itself.

If ip points to int x then *ip can occur in any context where x could, so
    *ip = *ip +10;
    increments *ip by 10 (x)
The unary operators * and & bind more tightly than arithmetic operators so the assignment
    y = *ip + 1 --> takes whatever ip points at adds 1 and assigns the result to y while
    *ip += 1 increments what IP points to as does
    ++*ip and (*ip)++
Also if iq is another pointer to int then
iq = ip
    copies the contents of ip into iq thus making iq point to whatever ip pointed to.